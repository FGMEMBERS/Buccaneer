<?xml version="1.0"?>
<!--
************************************************************************
Blackburn Buccaneer simulation config. This files ties together 
all the components used by FGFS to represent the aircraft. Components include 
the flight data model, instrument panel, and external 3D model. Lots still relies
on the Hawker Hunter/

This config is base

Ver 0.0.1



************************************************************************
-->
<PropertyList>
	<sim include="help.xml">
		<description type="string" >Blackburn Buccaneer S2(Observer)</description>
		<author type="string">Vivian Meazza, AJ MacLeod.</author>
		<status type="string">alpha</status>
		<aircraft-version>0.1</aircraft-version>

		<flight-model>null</flight-model>

		<model>
			<path>Models/Geometry/null.ac</path>
		</model>

		<presets>
			<onground>true</onground>
		</presets>

		<systems>
			<electrical>
				<path/>
			</electrical>
		</systems>
		<instrumentation>
			<path/>
		</instrumentation>

		<view n="0">
			<internal archive="y">true</internal>
			<config>
				<x-offset-m archive="y">0</x-offset-m>
				<y-offset-m archive="y">5</y-offset-m>
				<z-offset-m archive="y">0</z-offset-m>
				<pitch-offset-deg>-20</pitch-offset-deg>
				<default-field-of-view-deg>70</default-field-of-view-deg>
			</config>
		</view>
		<view n="97">
			<name>Model Cockpit View</name>
			<type>lookfrom</type>
			<config>
				<from-model type="bool">false</from-model>
				<from-model-idx type="int">0</from-model-idx>
				<at-model type="bool">false</at-model>
				<at-model-idx type="int">0</at-model-idx>
				<eye-lat-deg-path>/sim/viewer/eye/latitude-deg</eye-lat-deg-path>
				<eye-lon-deg-path>/sim/viewer/eye/longitude-deg</eye-lon-deg-path>
				<eye-alt-ft-path>/sim/viewer/eye/altitude-ft</eye-alt-ft-path>
				<eye-heading-deg-path>/sim/viewer/eye/heading-deg</eye-heading-deg-path>
				<eye-pitch-deg-path>/sim/viewer/eye/pitch-deg</eye-pitch-deg-path>
				<eye-roll-deg-path>/sim/viewer/eye/roll-deg</eye-roll-deg-path>
				<ground-level-nearplane-m type="double">0.2f</ground-level-nearplane-m>
				<default-field-of-view-deg type="double">65.0</default-field-of-view-deg>
				<x-offset-m type="double">0.05</x-offset-m>
				<y-offset-m
					type="double">1.30165</y-offset-m>
				<z-offset-m
					type="double">5.2269</z-offset-m>
				<heading-offset-deg>0</heading-offset-deg>
				<pitch-offset-deg>0</pitch-offset-deg>
				<roll-offset-deg>0</roll-offset-deg>
			</config>
		</view>
		<view n="98">
			<name>Model View</name>
			<type>lookat</type>
			<config>
				<from-model type="bool">false</from-model>
				<from-model-idx type="int">0</from-model-idx>
				<eye-lat-deg-path>/sim/viewer/eye/latitude-deg</eye-lat-deg-path>
				<eye-lon-deg-path>/sim/viewer/eye/longitude-deg</eye-lon-deg-path>
				<eye-alt-ft-path>/sim/viewer/eye/altitude-ft</eye-alt-ft-path>
				<eye-heading-deg-path>/sim/viewer/eye/heading-deg</eye-heading-deg-path>
				<eye-pitch-deg-path>/sim/viewer/eye/pitch-deg</eye-pitch-deg-path>
				<eye-roll-deg-path>/sim/viewer/eye/roll-deg</eye-roll-deg-path>
				<at-model type="bool">false</at-model>
				<at-model-idx type="int">0</at-model-idx>
				<target-lat-deg-path>/sim/viewer/target/latitude-deg</target-lat-deg-path>
				<target-lon-deg-path>/sim/viewer/target/longitude-deg</target-lon-deg-path>
				<target-alt-ft-path>/sim/viewer/target/altitude-ft</target-alt-ft-path>
				<target-heading-deg-path>/sim/viewer/target/heading-deg</target-heading-deg-path>
				<target-pitch-deg-path>/sim/viewer/target/pitch-deg</target-pitch-deg-path>
				<target-roll-deg-path>/sim/viewer/target/roll-deg</target-roll-deg-path>
				<target-x-offset-m type="double">0</target-x-offset-m>
				<target-y-offset-m type="double">0</target-y-offset-m>
				<target-z-offset-m type="double">0</target-z-offset-m>
				<ground-level-nearplane-m type="double">0.5f</ground-level-nearplane-m>
				<default-field-of-view-deg type="double">55.0</default-field-of-view-deg>
				<x-offset-m type="double">0</x-offset-m>
				<y-offset-m type="double">0</y-offset-m>
				<z-offset-m type="double">100</z-offset-m>
				<heading-offset-deg>0</heading-offset-deg>
				<pitch-offset-deg>0</pitch-offset-deg>
				<roll-offset-deg>0</roll-offset-deg>
			</config>
		</view>

		<viewer>
			<eye>
				<latitude-deg type="double">0</latitude-deg>
				<longitude-deg type="double">0</longitude-deg>
				<altitude-ft type="double">0</altitude-ft>
				<heading-deg type="double">0</heading-deg>
				<pitch-deg type="double">0</pitch-deg>
				<roll-deg type="double">0</roll-deg>
			</eye>
			<target>
				<latitude-deg type="double">0</latitude-deg>
				<longitude-deg type="double">0</longitude-deg>
				<altitude-ft type="double">0</altitude-ft>
				<heading-deg type="double">0</heading-deg>
				<pitch-deg type="double">0</pitch-deg>
				<roll-deg type="double">0</roll-deg>
			</target>
		</viewer>

		<headshake>
			<enabled type="bool">1</enabled>
		</headshake>

	</sim>
	
	<rotors>
		<main>
			<rpm type="double">1</rpm>
		</main>
	</rotors>


	<input>
		<keyboard>

			<!-- map keys for seat vertical adjust -->
			<key n="21">
				<name>CTRL-U</name>
				<desc>Seat Default.</desc>
				<binding>
					<command>property-assign</command>
					<property>/controls/seat/vertical-adjust</property>
					<value type="double">0</value>
				</binding>
				<binding>
					<condition>
						<equals>
							<property>sim/current-view/view-number</property>
							<value>0</value>
						</equals>
					</condition>
					<command>property-assign</command>
					<property>sim/current-view/y-offset-m</property>
					<value type="double">1.09045</value>
				</binding>
			</key>
			<key n="85">
				<name>U</name>
				<desc>Seat Down.</desc>
				<binding>
					<command>property-adjust</command>
					<property>/controls/seat/vertical-adjust</property>
					<step type="double">-0.01</step>
					<min type="double">-0.05</min>
					<max type="double">0.05</max>
				</binding>
				<binding>
					<condition>
						<equals>
							<property>sim/current-view/view-number</property>
							<value>0</value>
						</equals>
					</condition>
					<command>property-adjust</command>
					<property>sim/current-view/y-offset-m</property>
					<step type="double">-0.01</step>
					<min type="double">0.7339</min>
					<max type="double">0.8339</max>
				</binding>
			</key>
			<key n="117">
				<name>u</name>
				<desc>Seat Up.</desc>
				<binding>
					<command>property-adjust</command>
					<property>controls/seat/vertical-adjust</property>
					<step type="double">0.01</step>
					<min type="double">-0.05</min>
					<max type="double">0.05</max>
				</binding>
				<binding>
					<condition>
						<equals>
							<property>sim/current-view/view-number</property>
							<value>0</value>
						</equals>
					</condition>
					<command>property-adjust</command>
					<property>sim/current-view/y-offset-m</property>
					<step type="double">0.01</step>
					<min type="double">0.75</min>
					<max type="double">0.85</max>
				</binding>
			</key>
			<key n="10">
				<name>Ctrl-J</name>
				<desc>Jettison Inner and Outer Pylon Stores.</desc>
				<!-- port inner -->
				<binding>
					<command>property-assign</command>
					<property>/controls/armament/station[0]/jettison-all</property>
					<value type="bool">1</value>
				</binding>
				<!--<binding>
					<command>property-assign</command>
					<property>/yasim/weights/tank-100gal-lbs[0]</property>
					<value type="double">0.0</value>
				</binding>-->
				<binding>
					<command>property-assign</command>
					<property>controls/armament/station[1]/jettison-all</property>
					<value type="bool">1</value>
				</binding>
				<!--<binding>
					<command>property-assign</command>
					<property>/yasim/weights/tank-100gal-lbs[1]</property>
					<value type="double">0.0</value>
				</binding>-->
			</key>
			<key n="81">
				<name>Q</name>
				<desc>Switch to previous model</desc>
				<binding>
					<command>nasal</command>
					<script>globals["model-view"].model_view_handler.next(-1)</script>
				</binding>
			</key>
			<key n="113">
				<name>q</name>
				<desc>Switch to next model</desc>
				<binding>
					<command>nasal</command>
					<script>globals["model-view"].model_view_handler.next(1)</script>
				</binding>
			</key>
		</keyboard>
	</input>

	<!-- nasal stuff -->
	<nasal>
		<buccaneer>
			<file>Aircraft/Buccaneer/Models/buccaneer-obs-utils.nas</file>
			<!--<file>Aircraft/Buccaneer/Systems/fuel-system.nas</file>-->
		</buccaneer>
		<!--<seavixen-instrumentation>
			<file>Aircraft/SeaVixen/Systems/instrumentation.nas</file>
		</seavixen-instrumentation>-->
		<seavixen-electrical>
			<file>Aircraft/SeaVixen/Systems/seavixen-electrical.nas</file>
		</seavixen-electrical>
		<gunview>
			#			<file>Aircraft/Buccaneer/Models/gunview.nas</file>
		</gunview>

		<model-view>
			<!--<file>Aircraft/Buccaneer/Models/modelview.nas</file>-->
			<script>
				var model_view_handler = {
				init : func {
				me.models = {};
				me.list = [];
				me.current = 0;
				me.active = 0;
				},
				start : func {
				me.models = {};
				var ai = props.globals.getNode("/ai/models", 1);
				foreach (var m; [props.globals]
				~ ai.getChildren("aircraft")
				~ ai.getChildren("carrier")
				~ ai.getChildren("multiplayer")
				~ ai.getChildren("tanker"))
				me.models[m.getPath()] = m;

				me.lnr = [];
				append(me.lnr, setlistener("/ai/models/model-added", func(n) {
				var m = props.globals.getNode(n.getValue(), 1);
				me.models[m.getPath()] = m;
				}));
				append(me.lnr, setlistener("/ai/models/model-removed", func(n) {
				var m = props.globals.getNode(n.getValue(), 1);
				delete(me.models, m.getPath());
				}));
				append(me.lnr, setlistener("/devices/status/mice/mouse/mode", func(n) {
				me.mouse_mode = n.getValue();
				}, 1));
				append(me.lnr, setlistener("/devices/status/mice/mouse/button", func(n) {
				me.mouse_button = n.getValue();
				if (me.mouse_button == 1)
				me.mouse_start = me.mouse_y;
				}, 1));
				append(me.lnr, setlistener("/devices/status/mice/mouse/y", func(n) {
				me.mouse_y = n.getValue();
				}, 1));
				me.offs = 0;
				me.active = 1;
				me.reset();
				},
				update : func {
				if (me.mouse_mode == 0 and me.mouse_button) {
				var curr = getprop("/sim/current-view/z-offset-m") - me.offs;
				me.offs += me.mouse_y - me.mouse_start;
				var new = curr + me.offs;
				if (new &lt; 1)
				new = 1;
				setprop("/sim/current-view/z-offset-m", new);
				me.mouse_start = me.mouse_y;
				}
				return 0;
				},
				stop : func {
				me.active = 0;
				foreach (var listener; me.lnr)
				removelistener(listener);
				},
				reset : func {
				me.next(me.current = 0);
				},
				next : func(v) {
				if (!me.active or !size(me.models))
				return;
				if (v)
				me.current += v;
				else
				me.current = 0;

				me.list = sort(keys(me.models), cmp);
				if (me.current &lt; 0)
				me.current = size(me.list) - 1;
				elsif (me.current >= size(me.list))
				me.current = 0;

				var s = "/sim/view[98]/config";
				var c = me.list[me.current];
				setprop(s, "eye-lat-deg-path", c ~ "/position/latitude-deg");
				setprop(s, "eye-lon-deg-path", c ~ "/position/longitude-deg");
				setprop(s, "eye-alt-ft-path", c ~ "/position/altitude-ft");

				setprop(s, "target-lat-deg-path", c ~ "/position/latitude-deg");
				setprop(s, "target-lon-deg-path", c ~ "/position/longitude-deg");
				setprop(s, "target-alt-ft-path", c ~ "/position/altitude-ft");

				var s = "/sim/view[97]/config";
				setprop(s, "eye-lat-deg-path", c ~ "/position/latitude-deg");
				setprop(s, "eye-lon-deg-path", c ~ "/position/longitude-deg");
				setprop(s, "eye-alt-ft-path", c ~ "/position/altitude-ft");
				setprop(s, "eye-heading-deg-path", c ~ "/orientation/true-heading-deg");
				setprop(s, "eye-pitch-deg-path", c ~ "/orientation/pitch-deg");
				setprop(s, "eye-roll-deg-path", c ~ "/orientation/roll-deg");

				var n = me.models[me.list[me.current]];
				var type = n.getName();
				var name = nil;
				if (type == "") {
				var z = getprop("/sim/chase-distance-m");
				if (name = getprop("/sim/multiplay/callsign"))
				name = 'callsign "' ~ name ~ '"';
				} else {
				var z = type == "carrier" ? 350 : 70;
				if ((name = n.getNode("callsign")) != nil and (name = name.getValue()))
				name = 'callsign "' ~ name ~ '"';
				elsif ((name = n.getNode("name")) != nil and (name = name.getValue()))
				name = n.getName() ~ ' "' ~ name ~ '"';
				else
				name = n.getName() ~ " " ~ n.getIndex();
				}
				var color = {};
				if (type != "multiplayer")
				color = { text: { color: { red: 0.5, green: 0.8, blue: 0.5 }}};
				if (getprop("/sim/current-view/view-number") == 98)
				setprop("/sim/current-view/z-offset-m", me.offs = z);
				if (name)
				gui.popupTip(name, 2, color);
				},
				};

				setlistener("/sim/signals/fdm-initialized", func {
				view.manager.register("Model View", model_view_handler);
				view.manager.register("Model Cockpit View", model_view_handler);
				});
			</script>
		</model-view>

	</nasal>

	<environment>
		<params>
			<contrail-altitude type="double">50000</contrail-altitude>
		</params>
	</environment>


</PropertyList>
